#include "head.h"
/*
	特别感谢(好像是网上唯一的资料):
	https://github.com/hzqst/unicorn_pe/tree/master/unicorn_pe
*/

void InitGlobalVar() {
	g_global = new globalvar();
	g_pe = new pe_action();
	g_virtual = new virtual_helper();
	
	cs_open(CS_ARCH_X86, CS_MODE_64, &g_global->hanlde_capstone);
	uc_open(UC_ARCH_X86, UC_MODE_64, &g_global->uc_engine);
}

int main(int argc, char** argv, char** envp)
{
	InitGlobalVar();
	//设置底层环境
	g_virtual->init_virtual_processer();
	//设置模拟参数
	char* main_name = "main.exe";
	sim_process process = {0};
	process.context.m_TebBase = 0x80000; //进程TEB地址
	process.context.m_PebBase = 0x90000; //进程PEB地址
	process.process_data.UniqueProcessId = 6080; //进程id
	process.process_data.InheritedFromUniqueProcessId = 6080;
	//stack
	process.context.m_stack_base = 0x40000;
	process.context.m_stack_size = 0x10000;
	process.context.m_stack_end = process.context.m_stack_base + process.context.m_stack_size;
	process.context.m_heap_base = 0x10000000ull;
	process.context.m_heap_end = process.context.m_heap_base + 0x1000000ull;

	memcpy(process.process_data.ImageFileName, main_name,strlen(main_name));
	//加载到虚拟机内
	int sim_process_index = g_pe->load_pe(FILE, process);
	//运行模拟
	g_virtual->run(g_global->process[sim_process_index]);
	//printf("g_global->process[sim_process_index].m_image_base: %p \n", g_global->process[sim_process_index].m_image_base);
	//typedef int(WINAPI* PDLL_MAIN)(int argc, char** argv, char** envp);
	//PDLL_MAIN  EntryPoint = (PDLL_MAIN)((LPBYTE)g_global->process[sim_process_index].m_image_base + g_global->process[sim_process_index].m_nt_head->OptionalHeader.AddressOfEntryPoint);
	//EntryPoint(argc, argv, envp);

	return 0;
}
