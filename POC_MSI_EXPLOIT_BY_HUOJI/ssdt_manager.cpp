#include "head.h"
#include "ssdt_manager.h"
bool ssdt_manager::hanlde_ssdt_function(uc_engine* uc)
{
	/*
		简单复习一下WINDOWS SSDT CALL:
		RAX: ssdt index
		rcx rdx r8 r9 传参
		rsi: 用户参数buff,里面存着大于四位的参数
		参数计算 = (pServiceTable[index]  & 0xF) << 3
		但是我们这边是模拟的 pServiceTable 所以要自己手动确定...
	*/
	bool m_was_handled = false;
	printf("\t=>[SYSCALL]=<\n");
	uint64_t rcx, rbx, r10, r9, r8, rax, rdx, rsi;
	uc_reg_read(uc, UC_X86_REG_RCX, &rcx);
	uc_reg_read(uc, UC_X86_REG_RBX, &rbx);
	uc_reg_read(uc, UC_X86_REG_RAX, &rax);
	uc_reg_read(uc, UC_X86_REG_RDX, &rdx);
	uc_reg_read(uc, UC_X86_REG_RSI, &rsi);
	uc_reg_read(uc, UC_X86_REG_R10, &r10);
	uc_reg_read(uc, UC_X86_REG_R9, &r9);
	uc_reg_read(uc, UC_X86_REG_R8, &r8);
	printf("\tRBX: %p \n\tRAX: %p \n\tRDX: %p[参数2] \n\tRCX: %p[参数1] \n\tRSI: %p \n\tR10: %p \n\tR9: %p[参数3]\n\tR8: %p[参数4] \n", rbx, rax, rdx, rcx, rsi, r10, r9, r8);
	std::string ssdt_function_name = g_global->syscall_tables[rax];
	printf("\t%s \n", ssdt_function_name.c_str());
	if (ssdt_function_name == "ZwWaitForSingleObject") {
		FakeNtWaitForSingleObject(uc, rcx, rdx, r9);
		m_was_handled = true;
	}
	return m_was_handled;
}
/*
	Handle: handle
	Alertable: bool
	Timeout: Dword64
*/
void ssdt_manager::FakeNtWaitForSingleObject(uc_engine* uc, uint64_t Handle, uint64_t Alertable, uint64_t Timeout) {
	printf("\t[SSDT]FakeNtWaitForSingleObject %p %d %p \n", Handle, Alertable, Timeout);
	uint64_t rax; //返回
	//STATUS_INVALID_HANDLE
	if (Handle == 0 || Handle == -1) {
		rax = STATUS_INVALID_HANDLE;
		uc_reg_write(uc, UC_X86_REG_RAX, &rax);
		return;
	}
	rax = STATUS_WAIT_0;
	uc_reg_write(uc, UC_X86_REG_RAX, &rax);
	return;
}