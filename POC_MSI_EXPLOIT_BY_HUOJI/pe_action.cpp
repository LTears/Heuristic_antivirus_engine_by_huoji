#include "head.h"
#include "pe_action.h"
#include "virtual_helper.h"
/*
DWORD64 get_export_function(uint64_t params_dll_base,char* params_function_name) {
	//导出表
	DWORD uExportSize = 0;
	static RtlImageDirectoryEntryToDataFn RtlImageDirectoryEntryToData = NULL;
	if(RtlImageDirectoryEntryToData == NULL)
		RtlImageDirectoryEntryToData = (RtlImageDirectoryEntryToDataFn)GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlImageDirectoryEntryToData");
	PIMAGE_EXPORT_DIRECTORY pImageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)RtlImageDirectoryEntryToData((PVOID)params_dll_base, TRUE, IMAGE_DIRECTORY_ENTRY_EXPORT, &uExportSize);

	if (pImageExportDirectory)
	{
		moudle_export export_data = { 0 };
		DWORD dwNumberOfNames = (DWORD)(pImageExportDirectory->NumberOfNames);
		DWORD* pAddressOfFunction = (DWORD*)((PUCHAR)params_dll_base + pImageExportDirectory->AddressOfFunctions);
		DWORD* pAddressOfNames = (DWORD*)((PUCHAR)params_dll_base + pImageExportDirectory->AddressOfNames);
		WORD* pAddressOfNameOrdinals = (WORD*)((PUCHAR)params_dll_base + pImageExportDirectory->AddressOfNameOrdinals);

		for (size_t i = 0; i < dwNumberOfNames; i++)
		{
			char* strFunction = (char*)((PUCHAR)params_dll_base + pAddressOfNames[i]);
			if (strcmp(strFunction, params_function_name) == 0) {
				DWORD functionRva = pAddressOfFunction[pAddressOfNameOrdinals[i]];
				printf("%s functionRva: %08X \n", params_function_name, functionRva);
				DWORD result = (DWORD)params_dll_base + functionRva;
				return result;
			}
		}
	}
	return NULL;
}*/
//解决套娃问题
std::vector<struct_moudle> pe_action::map_pe_import(std::vector<struct_moudle> params_moudle_list, DWORD64 params_moudle_base) {
	PIMAGE_DOS_HEADER dos_head = (PIMAGE_DOS_HEADER)params_moudle_base;
	PIMAGE_NT_HEADERS nt_head = (PIMAGE_NT_HEADERS)((LPBYTE)params_moudle_base + dos_head->e_lfanew);
	PIMAGE_IMPORT_DESCRIPTOR import_driectory = (PIMAGE_IMPORT_DESCRIPTOR)((LPBYTE)params_moudle_base + nt_head->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);
	PIMAGE_IMPORT_DESCRIPTOR pIID = import_driectory;
	DWORD64 Function;
	
	while (pIID->Characteristics)
	{
		std::vector<moudle_import> import_data_dict;
		std::vector<moudle_export> export_data_dict;
		PIMAGE_THUNK_DATA OrigFirstThunk = (PIMAGE_THUNK_DATA)((LPBYTE)params_moudle_base + pIID->OriginalFirstThunk);
		PIMAGE_THUNK_DATA FirstThunk = (PIMAGE_THUNK_DATA)((LPBYTE)params_moudle_base + pIID->FirstThunk);
		LPCSTR dll_name = (LPCSTR)params_moudle_base + pIID->Name;
		/*
			处理普通导入表
			关于会不会有逃逸: LoadLibraryA是加载system32目录跟自己程序目录的dll,所以不会出现逃逸问题....吧?
			这种相当于cow、不要模拟一个进程就要把东西一股脑加载进去 
		*/
		HMODULE hModule = LoadLibraryA(dll_name);
		printf("LoadDllName :%s \n", dll_name);
		if (hModule == NULL) {
			/* 
				LoadLibraryA 为空 说明这个程序加载了自己的dll
				我们需要手动加载这个dll,以后再做
			*/
			printf("[!!!] load %s failed! \n", dll_name);
			continue;
		}
		while (OrigFirstThunk->u1.AddressOfData)
		{
			//导入表
			LPCSTR function_name;
			if (OrigFirstThunk->u1.Ordinal & IMAGE_ORDINAL_FLAG)
			{
				function_name = (LPCSTR)(OrigFirstThunk->u1.Ordinal & 0xFFFF);
			}
			else
			{
				PIMAGE_IMPORT_BY_NAME pIBN = (PIMAGE_IMPORT_BY_NAME)((LPBYTE)params_moudle_base + OrigFirstThunk->u1.AddressOfData);
				function_name = (LPCSTR)pIBN->Name;
			}
			Function = (DWORD64)GetProcAddress(hModule, function_name);
			printf("[PE] fixing import :%s %s %08X to %08X \n", dll_name, function_name, FirstThunk->u1.Function, Function);
			FirstThunk->u1.Function = Function;
			moudle_import import_data = { 0 };
			memcpy(import_data.name, (char*)function_name, strlen(function_name));
			import_data.function_address = Function;
			import_data.is_delayed_import = false;
			import_data_dict.push_back(import_data);
			OrigFirstThunk++;
			FirstThunk++;
		}
		/*
			延迟导入表
		*/
		export_data_dict = get_export((PVOID)hModule);
		params_moudle_list = push_to_virtual_helper(params_moudle_list, export_data_dict, import_data_dict, (char*)dll_name, (uint64_t)hModule);
		pIID++;
	}
	return params_moudle_list;
}

void pe_action::relocation(PVOID params_image_base, PVOID params_buffer, PIMAGE_NT_HEADERS params_nt_head) {
	PIMAGE_SECTION_HEADER pISH = (PIMAGE_SECTION_HEADER)(params_nt_head + 1);
	
	for (int i = 0; i < params_nt_head->FileHeader.NumberOfSections; i++)
	{
		WriteProcessMemory((HANDLE)-1, (PVOID)((LPBYTE)params_image_base + pISH[i].VirtualAddress), (PVOID)((LPBYTE)params_image_base + pISH[i].PointerToRawData), pISH[i].SizeOfRawData, NULL);
	}
	
	/*
	DWORD64 m_delta = (DWORD64)((LPBYTE)params_image_base - params_nt_head->OptionalHeader.ImageBase);
	PIMAGE_BASE_RELOCATION m_baserelocation = (PIMAGE_BASE_RELOCATION)((LPBYTE)params_image_base + params_nt_head->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);
	while (m_baserelocation->VirtualAddress)
	{
		if (m_baserelocation->SizeOfBlock >= sizeof(IMAGE_BASE_RELOCATION))
		{
			DWORD count = (m_baserelocation->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(WORD);
			//list = (PWORD)(m_baserelocation + 1);
			PWORD list = (PWORD)(m_baserelocation + sizeof(IMAGE_BASE_RELOCATION));
			for (int i = 0; i < count; i++)
			{
				if (list[i] >> 12 == IMAGE_REL_BASED_HIGHLOW)
				{
					auto address = (uint32_t*)((uintptr_t)params_image_base + m_baserelocation->VirtualAddress + (list[i] & 0x0FFF));
					*address += (uint32_t)m_delta;
				}
				if (list[i] >> 12 == IMAGE_REL_BASED_DIR64)
				{
					auto address = (uint64_t*)((uintptr_t)params_image_base + m_baserelocation->VirtualAddress + (list[i] & 0x0FFF));
					*address += m_delta;
				}
			}
		}
		m_baserelocation = (PIMAGE_BASE_RELOCATION)((LPBYTE)m_baserelocation + m_baserelocation->SizeOfBlock);
	}
	*/
	/*
		重定位,现代版
	*/
	IMAGE_DATA_DIRECTORY* relocation_data = &(params_nt_head->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC]);
	IMAGE_BASE_RELOCATION* relocation_ptr = NULL;
	for (DWORD64 parsed_size = 0; parsed_size < relocation_data->Size; parsed_size += relocation_ptr->SizeOfBlock) {
		relocation_ptr = (IMAGE_BASE_RELOCATION*)(relocation_data->VirtualAddress + parsed_size + DWORD64(params_image_base));
		if (relocation_ptr->VirtualAddress == NULL || relocation_ptr->SizeOfBlock == 0)
			break;
		DWORD64 entriesNum = (relocation_ptr->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(BASE_RELOCATION_ENTRY);
		BASE_RELOCATION_ENTRY* relocation_entry = (BASE_RELOCATION_ENTRY*)(DWORD64(relocation_ptr) + sizeof(IMAGE_BASE_RELOCATION));
		for (DWORD64 i = 0; i < entriesNum; i++) {
			DWORD64 reloc_field = relocation_ptr->VirtualAddress + (DWORD)relocation_entry->Offset;
			if (relocation_entry == NULL || relocation_entry->Type == 0)
				break;
			DWORD64* relocate_address_ptr = (DWORD64*)(DWORD64(params_image_base) + reloc_field);
			*relocate_address_ptr = ((*relocate_address_ptr) - params_nt_head->OptionalHeader.ImageBase + (uint64_t)params_image_base);
			relocation_entry = (BASE_RELOCATION_ENTRY*)(DWORD64(relocation_entry) + sizeof(BASE_RELOCATION_ENTRY));
		}
	}
}
std::vector<moudle_export> pe_action::get_export(PVOID params_image_base) {
	std::vector<moudle_export> result;
	//导出表
	DWORD uExportSize = 0;
	if(RtlImageDirectoryEntryToData == NULL)
		RtlImageDirectoryEntryToData = (RtlImageDirectoryEntryToDataFn)GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlImageDirectoryEntryToData");
	PIMAGE_EXPORT_DIRECTORY pImageExportDirectory = (PIMAGE_EXPORT_DIRECTORY)RtlImageDirectoryEntryToData((PVOID)params_image_base, TRUE, IMAGE_DIRECTORY_ENTRY_EXPORT, &uExportSize);

	if (pImageExportDirectory)
	{
		moudle_export export_data = { 0 };
		DWORD dwNumberOfNames = (DWORD)(pImageExportDirectory->NumberOfNames);
		DWORD* pAddressOfFunction = (DWORD*)((PUCHAR)params_image_base + pImageExportDirectory->AddressOfFunctions);
		DWORD* pAddressOfNames = (DWORD*)((PUCHAR)params_image_base + pImageExportDirectory->AddressOfNames);
		WORD* pAddressOfNameOrdinals = (WORD*)((PUCHAR)params_image_base + pImageExportDirectory->AddressOfNameOrdinals);

		for (size_t i = 0; i < dwNumberOfNames; i++)
		{
			char* strFunction = (char*)((PUCHAR)params_image_base + pAddressOfNames[i]);
			/*
				没有处理forward jmp export function
			*/
			DWORD functionRva = pAddressOfFunction[pAddressOfNameOrdinals[i]];
			//DWORD base = (DWORD)params_image_base + functionRva;
			moudle_export export_data = { 0 };
			memcpy(export_data.name, (char*)strFunction, strlen(strFunction));
			export_data.function_address = functionRva;
			result.push_back(export_data);
		}
	}
	return result;
}
/*
	作用: 映射一个可执行文件到虚拟机中
*/
int pe_action::load_pe(std::string parms_file_path, sim_process params_config)
{
	sim_process process = params_config;
	DWORD i;
	DWORD64 count = NULL;

	//1. 读入文件
	HANDLE m_file = CreateFileA(FILE, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
	if (m_file == INVALID_HANDLE_VALUE)
	{
		printf("无法读入文件 %d \n", GetLastError());
		return false;
	}
	process.file_size = GetFileSize(m_file, NULL);
	process.m_buffer = VirtualAlloc(NULL, process.file_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	ReadFile(m_file, process.m_buffer, process.file_size, &process.readed_size, NULL);
	CloseHandle(m_file);
	PIMAGE_DOS_HEADER m_dos_head = (PIMAGE_DOS_HEADER)process.m_buffer;
	if (m_dos_head->e_magic != IMAGE_DOS_SIGNATURE)
	{
		printf("\n 不是有效的执行文件 \n");
		VirtualFree(process.m_buffer, 0, MEM_RELEASE);
		return false;
	}
	process.m_nt_head = (PIMAGE_NT_HEADERS)((LPBYTE)process.m_buffer + m_dos_head->e_lfanew);
	if (process.m_nt_head->Signature != IMAGE_NT_SIGNATURE)
	{
		printf("\n 不是有效的PE文件 \n");
		VirtualFree(process.m_buffer, 0, MEM_RELEASE);
		return false;
	}
	//(LPVOID)process.m_nt_head->OptionalHeader.ImageBase
	process.m_image_base = (DWORD64)VirtualAlloc(NULL, process.m_nt_head->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	//修正image base
	process.m_nt_head = (PIMAGE_NT_HEADERS)((LPBYTE)process.m_image_base + ((PIMAGE_DOS_HEADER)process.m_image_base)->e_lfanew);
	m_dos_head = (PIMAGE_DOS_HEADER)process.m_image_base;
	relocation((PVOID)process.m_image_base, process.m_buffer, process.m_nt_head);
	process.process_data.moudle_list = map_pe_import(process.process_data.moudle_list, process.m_image_base);

	std::vector<moudle_import> import_data_dict;
	std::vector<moudle_export> export_data_dict = get_export((PVOID)process.m_image_base);
	process.process_data.moudle_list = push_to_virtual_helper(process.process_data.moudle_list, export_data_dict, import_data_dict, (char*)process.process_data.ImageFileName, (uint64_t)process.m_image_base);
	process.entry_point = (DWORD64)((LPBYTE)process.m_nt_head->OptionalHeader.AddressOfEntryPoint);
	//((PIMAGE_NT_HEADERS)((LPBYTE)process.m_image_base + m_dos_head->e_lfanew))->OptionalHeader.ImageBase = process.m_image_base;
	printf("[PE]EntryPoint: %08X nt_head->ImageBase %p buff: %p base: %p  \n", process.entry_point, process.m_nt_head->OptionalHeader.ImageBase, process.m_buffer, process.m_image_base + process.m_nt_head->OptionalHeader.SizeOfImage);
	/*
		设置虚拟进程上下文
	*/
	VirtualFree(process.m_buffer, 0, MEM_RELEASE);
	process = g_virtual->init_process_context(process);
	g_global->process.push_back(process);
	return g_global->process.size() - 1;
}
std::vector<struct_moudle> pe_action::push_to_virtual_helper(std::vector<struct_moudle> params_moudle_list,std::vector<moudle_export> params_export, std::vector<moudle_import> params_import, char* params_dll_name, uint64_t params_moudle_base)
{
	//检查dll是否已经在内存中
	struct_moudle moudle = { 0 };
	for (size_t i = 0; i < params_moudle_list.size(); i++)
	{
		if (params_moudle_list[i].base == params_moudle_base)
		{
			printf("[PE] skip %s \n", params_dll_name);
			return params_moudle_list;
		}
	}
	//解析头
	PIMAGE_DOS_HEADER m_dos_head = (PIMAGE_DOS_HEADER)params_moudle_base;
	PIMAGE_NT_HEADERS ntheader = (PIMAGE_NT_HEADERS)((LPBYTE)params_moudle_base + m_dos_head->e_lfanew);

	DWORD SectionAlignment;

	if (ntheader->FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64)
	{
		auto ntheader64 = (PIMAGE_NT_HEADERS64)ntheader;
		SectionAlignment = ntheader64->OptionalHeader.SectionAlignment;
	}
	else
	{
		SectionAlignment = ntheader->OptionalHeader.SectionAlignment;
	}
	auto SectionHeader = (PIMAGE_SECTION_HEADER)((PUCHAR)ntheader + sizeof(ntheader->Signature) + sizeof(ntheader->FileHeader) + ntheader->FileHeader.SizeOfOptionalHeader);

	for (WORD i = 0; i < ntheader->FileHeader.NumberOfSections; i++)
	{
		int prot = UC_PROT_READ;
		if (SectionHeader[i].Characteristics & IMAGE_SCN_MEM_EXECUTE)
			prot |= UC_PROT_EXEC;
		if (SectionHeader[i].Characteristics & IMAGE_SCN_MEM_WRITE)
			prot |= UC_PROT_WRITE;

		auto SectionSize = AlignSize(
			max(SectionHeader[i].Misc.VirtualSize, SectionHeader[i].SizeOfRawData),
			SectionAlignment);

		if (SectionHeader[i].Characteristics & (IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_CNT_CODE))
		{
			moudle_section section = {0};
			memcpy(section.name, (char*)SectionHeader[i].Name, 8);
			section.name[8] = 0;
			section.base = SectionHeader[i].VirtualAddress;
			section.size = SectionSize;
			section.protect_flag = prot;
			moudle.sections.emplace_back(section);
			printf("[PE]%s Section found: %s \n", params_dll_name, (char*)SectionHeader[i].Name);
		}
	}
	memcpy(moudle.name, (char*)params_dll_name, strlen(params_dll_name));
	moudle.base = params_moudle_base;
	moudle.entry = ntheader->OptionalHeader.AddressOfEntryPoint;
	moudle.size = ntheader->OptionalHeader.SizeOfImage;
	for (size_t index = 0; index < params_export.size(); ++index)
	{
		moudle.export_function.push_back(params_export[index]);
	}
	for (size_t index = 0; index < params_import.size(); ++index)
	{
		moudle.import_function.push_back(params_import[index]);
	}
	params_moudle_list.push_back(moudle);
	return params_moudle_list;
}

